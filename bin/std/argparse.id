/**
 * Provides classes for parsing command-line arguments
 * @module std/argparse
 * @author SplittyDev
 */

/*
 * This module is highly experimental, unstable
 * and probably very buggy. Do not use it in
 * a production environment and make sure to test
 * the results to be sure that your configuration works.
 *
 * It is also completely undocumented and poorly written.
 * If you are planning to refactor this code, go ahead,
 * it is definitely needed. ;)
 */

global __STDLIB = true
global __STDLIB_ARGPARSE = true
use skip, take, takeWhile from std.itertools

func __isBuiltinType (arg) {
    return arg isnot Null && type (arg) isnot Null
}

func __keyName (self, key) {
    accum = StringBuffer ()
    strip = true
    for (c in typecast (Str, key)) {
        match (c) {
            case '-' when !strip => accum.append ('_')
            case '-' => null
            case _ {
                strip = false;
                accum.append (c)
            }
        }
    }
    return Str (accum)
}

class ArgumentParser {

    func ArgumentParser (self, **kwargs) {
        self.defs       = []
        self.usage      = null
        self.prolog     = null
        self.epilog     = null
        self.program    = null
        self.version    = null
        for (key in kwargs) {
            current = kwargs [key]
            match (key) {
                case "usage"    => self.usage   = typecast (Str, current)
                case "prolog"   => self.prolog  = typecast (Str, current)
                case "epilog"   => self.epilog  = typecast (Str, current)
                case "program"  => self.program = typecast (Str, current)
                case "version"  => self.version = typecast (Str, current)
            }
        }
    }

    # TODO: Extend the functionality of this
    # TODO: Iterate through the arguments and print the help strings
    func help (self) {
        if (self.program isnot Null) {
            version = match (self.version isnot Null) {
                case true   => "(#{self.version})"
                case false  => "(unknown)"
            }
            print ("#{self.program} #{version}")
            if (self.usage is Null)
                print ('') # newline
        }
        if (self.usage isnot Null) {
            print ("Usage: #{self.usage}")
            print ('') # newline
        }
        if (self.prolog isnot Null) {
            print (self.prolog)
            print ('') # newline
        }
        if (self.epilog isnot Null) {
            print (self.epilog)
        }
    }

    func add (self, name, **kwargs) {
        argdef = ArgumentDefinition (name)
        for (key in kwargs) {
            current = kwargs [key]
            match (key) {
                case "type"     => argdef.setType (current)
                case "metavar"  => argdef.setMetaVar (current)
                case "nargs"    => argdef.setNargs (current)
                case "help"     => argdef.setHelpText (current)
                case "choices"  => argdef.setChoices (current)
                case "fallback" => argdef.setDefault (current)
                case "dest"     => argdef.setName (current)
                case "const"    => argdef.setConst (current)
            }
        }
        self.defs.append (argdef)
        return self
    }

    func parse (self, args) {
        dict = Dict ()
        args = List (args)
        argcount = len (args)
        realdest = 0

        # Iterate through the argument strings
        for (i = 0; i < argcount; i += 1) {
            key = args [i]

            # Get the argument definition for the current string
            # Continue if no argument definition is found
            def = null
            if ((def = self.tryGetDefinition (key)) == false) {
                continue
            }

            # Check if the argument is optional or positional
            if (def.isOptional ()) {

                # Check if the argument should be parsed normally
                nargs = def.getNargs ()
                if (nargs == def.DEFAULT) {
                    i += 1
                    def.setValue (args [i])
                }

                # Check if the argument is optional
                else if (nargs == def.OPTIONAL) {

                    # Check if the argument is a switch
                    if ((i + 1) == argcount
                        || ((i + 1) < argcount && self.isArgument (args [i + 1]))) {
                        def.setValue (def.getConst ())
                        continue
                    }

                    # Otherwise set the value
                    i += 1
                    def.setValue (args [i])
                }

                # Check if the value of the argument should be a list
                else if (false
                    || nargs == def.ZERO_OR_MORE
                    || nargs == def.ONE_OR_MORE) {
                    lst = []

                    # Check if the argument is a switch
                    # Only if nargs is ZERO_OR_MORE
                    if (nargs == def.ZERO_OR_MORE && ((i + 1) == argcount
                        || (i + 1) < argcount && self.isArgument (args [i + 1]))) {

                        # Set the value of the argument to the default value
                        if (def.hasDefault ()) {
                            lst.append (def.getDefault ())
                        }

                        # If that fails, raise an exception
                        else {
                            raise Exception ("Unable to assign a value to argument '#{def.getName ()}'")
                        }
                        continue
                    }

                    # Raise an exception if the argument is a switch
                    # Only if nargs is ONE_OR_MORE
                    else if (nargs == def.ONE_OR_MORE && ((i + 1) == argcount
                        || (i + 1) < argcount && self.isArgument (args [i + 1]))) {
                        raise Exception ("Unable to assign value to argument '#{def.getName ()}'")
                        continue
                    }

                    # Take the following elements if no limit is specified
                    if (nargs isnot Int) {

                        # Fetch elements that are not actual arguments
                        elements = takeWhile (skip (args, i + 1), lambda (x) => !self.isArgument (x))
                        for (element in elements) {
                            lst.append (element)
                        }
                    }

                    # Take the following n elements if a limit is specified
                    else {
                        count = typecast (Int, nargs)

                        # Raise an exception if more items are requested
                        # than there are elements available
                        if (argcount >= (i + 1 + count)) {
                            raise Exception ("Requested #{count} elements; only #{argcount} more available!")
                        }
                        elements = take (skip (args, i + 1), count)
                        for (element in elements) {

                            # Raise an exception if one of the fetched elements
                            # is an actual argument
                            if (self.isArgument (element)) {
                                raise Exception ("Fetched argument '#{__keyName (element)}' when element was expected!")
                            }

                            lst.append (element)
                        }
                    }
                    def.setValueList (lst)
                }
            }
        }

        # Iterate through the argument definitions
        for (def in self.defs) {

            # Check if the value is required and not set
            # raise an exception
            if (def.isRequired () && !def.hasValue () && !def.hasDefault ()) {
                raise Exception ("Required argument #{def.getName ()} not set!")
            }

            # Check if the value is required and has no value
            # but can be set to a default value
            else if (def.isRequired () && def.hasDefault ()) {

                # Check if the value should be a list
                nargs = def.getNargs ()
                if (nargs == def.ZERO_OR_MORE
                    || nargs == def.ONE_OR_MORE) {
                    def.setValue ([def.getDefault ()])
                }

                # Otherwise set the value to the default value
                else {
                    def.setValue (def.getDefault ())
                }
            }

            # Check if the argument definition satisfies
            # the choices, if any
            if (def.satisfiesChoices ()) {

                # Set the dict entry
                dict [def.getName ()] = def.getValue ()
            }
        }

        return dict
    }

    func isArgument (self, key) {
        return key.startsWith ("--") || key.startsWith ("-")
    }

    func tryGetDefinition (self, key) {
        for (def in self.defs) {
            if (def.name == key) {
                return def
            }
        }
        return false
    }
}

class ArgumentDefinition {

    func ArgumentDefinition (self, name) {
        self.name           = name
        self.DEFAULT        = 0
        self.OPTIONAL       = '?'
        self.ONE_OR_MORE    = '+'
        self.ZERO_OR_MORE   = '*'
        self.choices        = []
        self.const          = null
        self.value          = null
        self.help           = null
        self.def            = null # default
        self.optional       = true
        self.positional     = false
        self.required       = false
        self.type           = Str
        self.metavar        = "Str"
        self.nargs          = self.DEFAULT
        self.dest           = __keyName (typecast (Str, name))
    }

    func getName (self) {
        return self.dest
    }

    func setName (self, destination) {
        self.dest = typecast (Str, destination)
    }

    func hasConst (self) {
        return self.const isnot Null
    }

    func getConst (self) {
        return self.const
    }

    func setConst (self, obj) {
        self.const = obj
    }

    func hasValue (self) {
        return self.value isnot Null
	}

    func getValue (self) {
        if (self.hasValue ())
            return self.value
        return self.getDefault ()
    }

    func setValue (self, str) {
        result = self.tryCast (self.type, str)
        if (!result [0]) {
            raise Exception ("Cast from '#{str.__name__}' to '#{self.type.__name__}' failed for '#{self.getName ()}'.")
        }
        self.value = result [1]
    }

    func setValueList (self, lst) {
        self.value = []
        for (item in lst) {
            result = self.tryCast (self.type, item)
            if (!result [0]) {
                raise Exception ("Cast from '#{item.__name__}' to '#{self.type.__name__}' failed for '#{self.getName ()}'.")
            }
            self.value.append (result [1])
        }
    }

    func getDefault (self) {
        return self.def
    }
    
    func setMetaVar (self, T) {
        if (T is Str) {
            self.metavar = T
        } else {
            self.metavar = Str (T)
        }
    }

    func setType (self, T) {
        self.type = T
    }

    func setDefault (self, obj) {
        self.def = obj
    }

    func getNargs (self) {
        return self.nargs
    }

    func setNargs (self, num) {
        if (num is Int) {
            if (num < 0) {
                raise Exception ("Nargs has to be a positive integer!")
            }
            self.nargs = num
        } else if (false
            || num == self.DEFAULT
            || num == self.OPTIONAL
            || num == self.ONE_OR_MORE
            || num == self.ZERO_OR_MORE) {
            self.nargs = num
        } else {
            raise Exception ("Invalid nargs value!")
        }
    }

    func hasChoices (self) {
        return self.choices isnot Null && len (self.choices) > 0
    }

    func satisfiesChoices (self) {
        if (!self.hasChoices ()) {
            return true
        }
        if (!self.hasValue ()) {
            return false
        }
        value = repr (self.getValue ())
        for (choice in self.choices) {
            if (value == repr (choice)) {
                return true
            }
        }
        return false
    }

    func setChoices (self, choices) {
        self.choices = typecast (List, choices)
    }

    func getHelpText (self) {
        return typecast (Str, self.help)
    }

    func setHelpText (self, str) {
        self.help = typecast (Str, str)
    }

    func isRequired (self) {
        return self.required
    }

    func isOptional (self) {
        return self.optional
    }

    func isPositional (self) {
        return self.positional
    }

    func tryCast (self, T, str) {
        try {
            return (true, T (str))
        } except { }
        return (false, null)
    }
}
