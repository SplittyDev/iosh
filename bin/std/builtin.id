# Author: SplittyDev (github.com/splittydev)

# ! func print (*object)
# ! func invoke (function, [dict])
# ! func eval (source)
# ! func open (file, mode)
# ! func input ([prompt])

use hasAttribute from reflection
use ICollection from collections

# Returns a string representation of an object
# @param Object object The object to be represented
# @return Str The string representation of the specified object
func repr (object) {
    if (hasAttribute (object, "__repr__")) {
        return object.__repr__ ()
    }
    # TODO: Remove this after Iodine has been updated
    # This should not be needed at all
    # __repr__ should be implemented for every type
    dict = {
        "Str": lambda () => '"' + object + '"',
        "List": lambda ()
            => repr_get_iterable (repr, object, "[", "]"),
        "Tuple": lambda ()
            => repr_get_iterable (repr, object, "(", ")"),
        "HashMap": lambda ()
            => repr_get_hashmap (repr, object),
    }
    typename = Str (object.__type__)
    if (hasAttribute (object, "__name__")) {
        typename = object.__name__
    }
    if (dict.contains (typename)) {
        return dict [typename] ()
    }
    return Str (object)
}

# Builds the string representation of an iterable
# @param Object this The repr function
# @param Object itr The iterable
# @return Str The string representation
func repr_get_iterable (this, itr, ochr, cchr) {
    i = 0
    accum = StringBuffer ()
    accum.append (ochr)
    foreach (item in itr) {
        if (i > 0) {
            accum.append (", ")
        }
        accum.append (this (item))
        i += 1
    }
    accum.append (cchr)
    return Str (accum)
}

# Builds the string representation of a hashmap
# @param Object this The repr function
# @param HashMap hashmap The hashmap
# @return Str The string representation
func repr_get_hashmap (this, hashmap) {
    i = 0
    accum = StringBuffer ()
    accum.append ("{")
    foreach (key in hashmap) {
        if (i > 0) {
            accum.append (", ")
        }
        accum.append (this (key))
        accum.append ("=")
        accum.append (this (hashmap [key]))
        i += 1
    }
    accum.append ("}")
    return Str (accum)
}

# Returns the type of an object
# @param Object object The object whose type is to be returned
# @return Type The type of the specified object
func type (object) {
    return object.__type__
}

# Returns an iterable covering a range
# @param *Object args The parameters
# @return Range An iterable covering the specified range
# @yield Object The whole numbers that lie within the specified range
func range (*args) {
    result = match (len (args)) {
        case 1 => 0 .. args [0]
        case 2 => args [0] .. args [1]
    }
    if (result != null) {
        return result
    }
    for (i = args [0]; i < args [1]; i += args [2]) {
        yield i
    }
}

# Returns the length of a countable object
# @param Object countable The countable object
# @return Int The length of the specified object
func len (countable) {
    if (countable is ICollection) {
        return countable.count ()
    } else if (hasAttribute (countable, "__len__")) {
        return countable.__len__ ()
    } else if (!hasAttribute (countable, "__iter__")) {
        if (countable is Str) {
            return len_bruteforce_string_length (countable)
        } else if (countable is Tuple) {
            return len_bruteforce_tuple_length (countable)
        }
    }
    i = 0
    foreach (_ in countable) {
        i += 1
    }
    return i
}

# Bruteforces the length of a string
# @param Str str The string
# @return Int The length of the string
func len_bruteforce_string_length (str) {
    i = 0
    try {
        while (true) {
            str.substr (i)
            i += 1
        }
    } except { }
    return i
}

# Bruteforces the length of a tuple
# @param Tuple tpl The tuple
# @return Int The length of the tuple
func len_bruteforce_tuple_length (tpl) {
    i = 0
    try {
        while (true) {
            tpl [i]
            i += 1
        }
    } except { }
    return i
}

# Casts the specified object to the specified type
# @param Type The type
# @param Object object The object
# @return Object The object casted to the specified type
func typecast (type, object) {
    if (object isnot type) {
        raise TypeException (Str (type))
    }
    return object
}