# Author: SplittyDev (github.com/splittydev)

# ! func print (*object)
# ! func invoke (function, [dict])
# ! func eval (source)
# ! func open (file, mode)
# ! func input ([prompt])

use hasAttribute from reflection
use ICollection from std.collections

# Returns a string representation of an object
# @param Object object The object to be represented
# @return Str The string representation of the specified object
func repr (object) {
    if (hasAttribute (object, "__repr__")) {
        return object.__repr__ ()
    }
    # TODO: Remove this after Iodine has been updated
    # This should not be needed at all
    # __repr__ should be implemented for every type
    dict = {
        "Str": lambda () => '"' + object + '"',
        "List": lambda ()
            => repr_get_iterable (repr, object, "[", "]"),
        "Tuple": lambda ()
            => repr_get_iterable (repr, object, "(", ")"),
        "HashMap": lambda ()
            => repr_get_hashmap (repr, object),
    }
    typename = Str (object.__type__)
    if (hasAttribute (object, "__name__")) {
        typename = object.__name__
    }
    if (dict.contains (typename)) {
        return dict [typename] ()
    }
    return Str (object)
}

# Builds the string representation of an iterable
# @param Object this The repr function
# @param Object itr The iterable
# @return Str The string representation
func repr_get_iterable (this, itr, ochr, cchr) {
    i = 0
    accum = StringBuffer ()
    accum.append (ochr)
    foreach (item in itr) {
        if (i > 0) {
            accum.append (", ")
        }
        accum.append (this (item))
        i += 1
    }
    accum.append (cchr)
    return Str (accum)
}

# Builds the string representation of a hashmap
# @param Object this The repr function
# @param HashMap hashmap The hashmap
# @return Str The string representation
func repr_get_hashmap (this, hashmap) {
    i = 0
    accum = StringBuffer ()
    accum.append ("{")
    foreach (key in hashmap) {
        if (i > 0) {
            accum.append (", ")
        }
        accum.append (this (key))
        accum.append ("=")
        accum.append (this (hashmap [key]))
        i += 1
    }
    accum.append ("}")
    return Str (accum)
}

# Returns the type of an object
# @param Object object The object whose type is to be returned
# @return Type The type of the specified object
func type (object) {
    return object.__type__
}

# Returns an iterable covering a range
# @param *Object args The parameters
# @return Range An iterable covering the specified range
# @yield Object The whole numbers that lie within the specified range
func range (*args) {
    result = match (len (args)) {
        case 1 => 0 .. args [0]
        case 2 => args [0] .. args [1]
    }
    if (result != null) {
        return result
    }
    for (i = args [0]; i < args [1]; i += args [2]) {
        yield i
    }
}

# Returns the length of a countable object
# @param Object countable The countable object
# @return Int The length of the specified object
func len (countable) {
    if (countable is ICollection) {
        return countable.count ()
    } else if (hasAttribute (countable, "__len__")) {
        return countable.__len__ ()
    } else if (!hasAttribute (countable, "__iter__")) {
        if (countable is Str) {
            return len_bruteforce_string_length (countable)
        } else if (countable is Tuple) {
            return len_bruteforce_tuple_length (countable)
        }
    }
    i = 0
    foreach (_ in countable) {
        i += 1
    }
    return i
}

# Bruteforces the length of a string
# @param Str str The string
# @return Int The length of the string
func len_bruteforce_string_length (str) {
    i = 0
    try {
        while (true) {
            str.substr (i)
            i += 1
        }
    } except { }
    return i
}

# Bruteforces the length of a tuple
# @param Tuple tpl The tuple
# @return Int The length of the tuple
func len_bruteforce_tuple_length (tpl) {
    i = 0
    try {
        while (true) {
            tpl [i]
            i += 1
        }
    } except { }
    return i
}

# Casts the specified object to the specified type
# @param Type The type
# @param Object object The object
# @return Object The object casted to the specified type
func typecast (type, object) {
    if (object isnot type) {
        raise TypeException (Str (type))
    }
    return object
}

func hex (arr) {
    upper = [
        "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0A", "0B", "0C", "0D", "0E", "0F",
        "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1A", "1B", "1C", "1D", "1E", "1F",
        "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2A", "2B", "2C", "2D", "2E", "2F",
        "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3A", "3B", "3C", "3D", "3E", "3F",
        "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4A", "4B", "4C", "4D", "4E", "4F",
        "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5A", "5B", "5C", "5D", "5E", "5F",
        "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6A", "6B", "6C", "6D", "6E", "6F",
        "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7A", "7B", "7C", "7D", "7E", "7F",
        "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8A", "8B", "8C", "8D", "8E", "8F",
        "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9A", "9B", "9C", "9D", "9E", "9F",
        "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "AA", "AB", "AC", "AD", "AE", "AF",
        "B0", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "BA", "BB", "BC", "BD", "BE", "BF",
        "C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "CA", "CB", "CC", "CD", "CE", "CF",
        "D0", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "DA", "DB", "DC", "DD", "DE", "DF",
        "E0", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "EA", "EB", "EC", "ED", "EE", "EF",
        "F0", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "FA", "FB", "FC", "FD", "FE", "FF"
    ]
    lower = [
        "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f",
        "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f",
        "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f",
        "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f",
        "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f",
        "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f",
        "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f",
        "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f",
        "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f",
        "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f",
        "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af",
        "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf",
        "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf",
        "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df",
        "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef",
        "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"
    ]
    accum = StringBuffer ()
    if (len (arr) == 0) {
        return "00"
    }
    for (i = 0; i < len (arr); i += 1) {
        accum.append (lower [arr [i]])
    }
    return Str (accum)
}