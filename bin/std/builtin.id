/**
 * Provides essential core functionality
 * @module std/builtin
 * @author SplittyDev
 */

/* The following functions can't be implemented in pure Iodine:
 * ! func print (*object)
 * ! func invoke (function, [dict])
 * ! func eval (source)
 * ! func open (file, mode)
 * ! func input ([prompt])
 */

use ArgumentException, TypeException from std.exceptions
use Collection, Countable, Iterable from std.collections

# Any type that has a string representation
trait Representable {
    func __repr__ (self)
}

/* Returns a string representation of an object
 * @param Object object The object to be represented
 * @raise TypeException
 * @return Str The string representation of the specified object
 */
func repr (object) {

    # Check if the object matches the trait representable
    if (object is Representable) {
        return object.__repr__ ()
    }

    # Build a table of types that require a special representation
    dict = {
        "Str": lambda () {
            typecast (Str, object)
            return "\"#{object}\""
        },
        "Tuple": lambda () {
            typecast (Tuple, object)
            i = 0
            accum = StringBuffer ()
            accum.append ("(")
            for (key in object) {
                if (i > 0) {
                    accum.append (", ")
                }
                accum.append (repr (key))
                i += 1
            }
            accum.append (")")
            return Str (accum)
        },
        "Dict": lambda () {
            typecast (Dict, object)
            i = 0
            accum = StringBuffer ()
            accum.append ("{")
            for (key in object) {
                if (i > 0) {
                    accum.append (", ")
                }
                accum.append (repr (key))
                accum.append (" = ")
                accum.append (repr (object [key]))
                i += 1
            }
            accum.append ("}")
            return Str (accum)
        },
    }

    # Check the table of special representations
    typename = Str (object.__type__)
    if (dict.contains (typename)) {
        return dict [typename] ()
    }

    # Check if the object matches the Iterable trait
    if (object is Iterable) {
        i = 0
        accum = StringBuffer ()
        accum.append ("[")
        for (item in object) {
            if (i > 0) {
                accum.append (", ")
            }
            accum.append (repr (item))
            i += 1
        }
        accum.append ("]")
        return Str (accum)
    }

    # If everything else fails, return the
    # default string representation of the object
    return Str (object)
}

/* Returns the type of an object
 * @param Object object The object whose type is to be returned
 * @return Null|Type The type of the specified object
 */
func type (object) {
    return object.__type__
}

/* Returns an iterable covering a range
 * @param Int start The inclusive start
 * @param Int end The exclusive end
 * @param **Object kwargs Optional arguments
 * @optional Int step The step
 * @raise Exception
 * @raise TypeException If start is not of type Int
 * @raise TypeException If end is not of type Int
 * @raise TypeException If step value is not of type Int
 * @yield Int The whole numbers that lie within the specified range
 */
func range (*args, **kwargs) {

    # Default values
    start = 0
    end = 0
    step = 1

    # Check arguments
    arglen = len (args)
    if (arglen > 3) {
        raise Exception ("Too many arguments")
    }
    if (arglen > 2) {
        step = typecast (Int, args [2])
    }
    if (arglen > 1) {
        start = typecast (Int, args [1])
    }
    if (arglen > 0) {
        end = typecast (Int, args [0])
    }
    if (arglen == 0) {
        raise Exception ("Too few arguments")
    }

    # Yield the values within the desired range
    for (i in start .. end) {
        if ((start + i) % step == 0) {
            yield i
        }
    }
}

/* Returns the length of a countable object
 * @param Object|Collection|Countable countable The countable object
 * @raise ArgumentException If the object is not countable
 * @return Int The length of the specified object
 */
func len (countable) {

    # Check if the countable implements Collection
    if (countable is Collection) {
        return countable.count ()
    }

    # Check if the countable matches the trait Countable
    else if (countable is Countable) {
        return countable.__len__ ()
    }

    # Check if the countable matches the trait Iterable
    # Includes special cases: Runtime provided, Range iterator
    else if (countable is Iterable) {

        # Iterate over the countable
        # and count the elements
        i = 0;
        for (_ in countable) {
            i += 1
        }
        return i
    }

    # StringBuffer's need special handling
    else if (countable is StringBuffer) {
        return len (Str (countable))
    }

    # The countable doesn't seem to be countable at all
    # Raise an exception
    raise ArgumentException ("countable", "The object is not countable.")
}

/* Verifies that an object is of a specific type
 * @param Type The type
 * @param Object object The object
 * @raise TypeException If the object is not of the specified type
 * @return Object The object
 */
func typecast (type, object) {
    if (object isnot type) {
        raise TypeException (Str (object), Str (type))
    }
    return object
}

/* Verifies that an object is of integer type
 * @param Object object The object
 * @raise TypeException If the object is not of integer type
 * @return Object The object
 */
func intcast (object) {
    if (object isnot Int && object isnot BigInt) {
        raise TypeException (Str (object), "Int|BigInt")
    }
    return object
}

/* Returns the hex representation of an iterable
 * @param Iterable arr The iterable
 * @raise Exception|TypeException
 * @return Str The hex representation of the specified iterable
 */
func hex (arr) {
    typecast (Iterable, arr)

    # The lookup table
    lut = [
        "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f",
        "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f",
        "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f",
        "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f",
        "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f",
        "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f",
        "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f",
        "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f",
        "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f",
        "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f",
        "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af",
        "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf",
        "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf",
        "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df",
        "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef",
        "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"
    ]

    # Store the length of the array so it doesn't have to be
    # enumerated more than once, for performance and predictability
    arrlen = len (arr)

    # Check for the special case of an empty array
    if (arrlen == 0) {
        return lut [0]
    }

    # Build the hex string
    accum = StringBuffer ()
    for (i = 0; i < arrlen; i += 1) {

        # Store the current element so it doesn't have to be
        # fetched more than once, for performance and predictability
        current = arr [i]

        if (current isnot Int && current isnot BigInt) {
            raise ArgumentException ("arr", "Array contains non-integer values.")
        }

        # Make sure that the element lies within [0 ... 255]
        if (current < 0 || current > 255) {
            raise Exception ("The #{i}-th element exceeds the bounds of a byte.")
        }
        accum.append (lut [Int (current)])
    }
    return Str (accum)
}