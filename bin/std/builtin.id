# Author: SplittyDev (github.com/splittydev)

# ! func print (*object)
# ! func invoke (function, [dict])
# ! func eval (source)
# ! func open (file, mode)
# ! func input ([prompt])

use Iterable, Countable, Collection from std.collections

# Any type that has a string representation
trait Representable {
    func __repr__ (self)
}

# A list of builtin countables
BuiltinIterables = [
    List,
    HashMap,
    Tuple,
    Str,
    Bytes,
]

# Returns a string representation of an object
# @param Object object The object to be represented
# @return Str The string representation of the specified object
func repr (object) {

    # Check if the object matches the trait representable
    if (object is Representable) {
        return object.__repr__ ()
    }

    # Check if the object matches the Iterable trait
    else if (object is Iterable || BuiltinIterables.contains (object.__type__)) {
        i = 0
        accum = StringBuffer ()
        accum.append ("[")
        foreach (item in object) {
            if (i > 0) {
                accum.append (", ")
            }
            accum.append (repr (item))
            i += 1
        }
        accum.append ("]")
        return Str (accum)
    }

    # Get the name of the type
    typename = Str (object.__type__)

    # Build a table of types that require a special representation
    dict = {
        "Str": lambda () => '"' + object + '"',
        "HashMap": lambda () => repr_get_hashmap (repr, object),
    }

    # Check the table of special representations
    if (dict.contains (typename)) {
        return dict [typename] ()
    }

    # If everything else fails, return the
    # default string representation of the object
    return Str (object)
}

# Builds the string representation of a hashmap
# @param Object this The repr function
# @param HashMap hashmap The hashmap
# @return Str The string representation
func repr_get_hashmap (this, hashmap) {
    i = 0
    accum = StringBuffer ()
    accum.append ("{")
    foreach (key in hashmap) {
        if (i > 0) {
            accum.append (", ")
        }
        accum.append (this (key))
        accum.append (" = ")
        accum.append (this (hashmap [key]))
        i += 1
    }
    accum.append ("}")
    return Str (accum)
}

# Returns the type of an object
# @param Object object The object whose type is to be returned
# @return Type The type of the specified object
func type (object) {
    return object.__type__
}

# Returns an iterable covering a range
# @param *Object args The parameters
# @return Range An iterable covering the specified range
# @yield Object The whole numbers that lie within the specified range
func range (*args) {
    result = match (len (args)) {
        case 1 => 0 .. args [0]
        case 2 => args [0] .. args [1]
    }
    if (result != null) {
        return result
    }
    for (i = args [0]; i < args [1]; i += args [2]) {
        yield i
    }
}

# Returns the length of a countable object
# @param Object countable The countable object
# @return Int The length of the specified object
func len (countable) {

    # Check if the countable implements Collection
    if (countable is Collection) {
        return countable.count ()
    }

    # Check if the countable matches the trait Countable
    else if (countable is Countable) {
        return countable.__len__ ()
    }

    # Check if the countable matches the trait Iterable
    # Includes special cases: Runtime provided, Range iterator
    else if (countable is Iterable
        || BuiltinIterables.contains (countable.__type__)
        || countable.__name__ == "RangeIterator") {

        # Iterate over the countable
        # and count the elements
        i = 0
        for (_ in countable) {
            i += 1
        }
        return i
    }

    # StringBuffer's need special handling
    else if (countable is StringBuffer) {
        return len (Str (countable))
    }

    # The countable doesn't seem to be countable at all
    # Raise an exception
    raise Exception ("The specified object is not countable.")
}

# Casts an object to a type
# @param Type The type
# @param Object object The object
# @return Object The object casted to the specified type
func typecast (type, object) {
    if (object isnot type) {
        raise TypeException (Str (type))
    }
    return object
}

# Returns the hex representation of an iterable
# @param Iterable arr The iterable
# @return Str The hex representation of the specified iterable
func hex (arr) {
    typecast (Iterable, arr)

    # The lookup table
    lut = [
        "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f",
        "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f",
        "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f",
        "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f",
        "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f",
        "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f",
        "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f",
        "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f",
        "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f",
        "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f",
        "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af",
        "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf",
        "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf",
        "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df",
        "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef",
        "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"
    ]

    # Store the length of the array so it doesn't have to be
    # enumerated more than once, for performance and predictability
    arrlen = len (arr)

    # Check for the special case of an empty array
    if (arrlen == 0) {
        return lut [0]
    }

    # Build the hex string
    accum = StringBuffer ()
    for (i = 0; i < arrlen; i += 1) {

        # Store the current element so it doesn't have to be
        # fetched more than once, for performance and predictability
        current = arr [i]

        # Make sure that the element is an Int
        typecast (Int, current)

        # Make sure that the element lies within [0 ... 255]
        if (current < 0 || current > 255) {
            raise Exception ("The {0}-th element exceeds the bounds of a byte.".format (i))
        }
        accum.append (lut [current])
    }
    return Str (accum)
}