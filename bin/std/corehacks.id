# Builds the string representation of a list
# @param function this The repr function
# @param list lst The list
# @return str The string representation
func repr_get_list (this, lst) {
    i = 0
    accum = StringBuffer ()
    accum.append ("[")
    foreach (item in lst) {
        if (i > 0) accum.append (", ")
        accum.append (this (item))
        i += 1
    }
    accum.append ("]")
    return Str (accum)
}

# Builds the string representation of a tuple
# @param function this The repr function
# @param tuple tpl The tuple
# @return str The string representation
func repr_get_tuple (this, tpl) {
    i = 0
    accum = StringBuffer ()
    accum.append ("(")
    foreach (item in tpl) {
        if (i > 0) accum.append (", ")
        accum.append (this (item))
        i += 1
    }
    accum.append (")")
    return Str (accum)
}

# Builds the string representation of a hashmap
# @param function this The repr function
# @param hashmap hashmap The hashmap
# @return str The string representation
func repr_get_hashmap (this, hashmap) {
    i = 0
    accum = StringBuffer ()
    accum.append ("{")
    foreach (key in hashmap) {
        if (i > 0) accum.append (", ")
        accum.append (this (key))
        accum.append ("=")
        accum.append (this (hashmap [key]))
        i += 1
    }
    accum.append ("}")
    return Str (accum)
}


# Bruteforces the length of a string
# @param string str The string
# @return int The length of the string
func len_bruteforce_string_length (str) {
    i = 0
    try {
        while (true) {
            str.substr (i)
            i += 1
        }
    } except { }
    return i
}

# Bruteforces the length of a tuple
# @param tuple tpl The tuple
# @return int The length of the tuple
func len_bruteforce_tuple_length (tpl) {
    i = 0
    try {
        while (true) {
            tpl [i]
            i += 1
        }
    } except { }
    return i
}