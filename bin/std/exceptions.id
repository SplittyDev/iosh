/**
 * Provides classes for raising specific exceptions
 * @module std/exceptions
 * @author SplittyDev
 */

use typecast from std.builtin

class ArgumentException : Exception {

    func ArgumentException (self, argument, message) {
        super ("Argument '#{argument}': #{message}")
    }
}

class TypeException : Exception {

    func TypeException (self, argument, expectedType) {
        super (TypeException.buildMessage (argument, expectedType))
    }

    func buildMessage (argument, types) {
        typecast (Str, argument)
        typecast (Str, types)
        if (types.contains ("|")) {
            if ((r = types.rfind ("|")) != types.find ("|")) {
                types = "#{types [:r]} or #{types [r + 1:]}"
            }
            types = types.replace ("|", ", ")
        }
        return "Expected '#{argument}' to be of type #{types}"
    }
}