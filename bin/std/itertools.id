# Author: SplittyDev (github.com/splittydev)

# Chains multiply iterables to one
# @param *iterators The iterables
# @yield Object The items of the chain
func chain (*iterables) {
    foreach (iterator in iterables) {
        foreach (item in iterator) {
            yield item
        }
    }
}

# Executes a function for every element of an iterator
# @param Object iterator The iterator
# @param Object The callback
# @return null
func each (iterator, callback) {
    foreach (item in iterator) {
        callback (item)
    }
}

# Takes the first n elements
# @param Object iterator The iterator
# @param Int count The number of elements to take
# @yield Object The elements
func take (iterator, count) {
    i = 0
    foreach (item in iterator) {
        if (i < count) {
            yield item
        }
        i += 1
    }
}

# Takes elements while a condition is true
# @param Object iterator The iterator
# @param Object callback The condition
# @yield Object The elements
func takeWhile (iterator, callback) {
    foreach (item in iterator) {
        if (!typecast (Bool, callback (item))) {
            break
        }
        yield item
    }
}

# Skips the first n elements
# @param Object iterator The iterator
# @param Int The number of elements to skip
# @yield The remaining elements
func skip (iterator, count) {
    i = 0
    foreach (item in iterator) {
        if (i >= count) {
            yield item
        }
        i += 1
    }
}

# Skips elements while a condition is true
# @param Object iterator The iterator
# @param Object callback The condition
# @yield Object The remaining elements
func skipWhile (iterator, callback) {
    foreach (item in iterator) {
        if (typecast (Bool, callback (item))) {
            continue
        }
        yield item
    }
}